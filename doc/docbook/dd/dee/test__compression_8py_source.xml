<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__compression_8py_source" xml:lang="en-US">
<title>test_compression.py</title>
<indexterm><primary>python/test_compression.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test__compression_8py_source_1l00001"/><link linkend="_namespacetest__compression">00001</link> <emphasis role="keyword">import</emphasis>&#32;unittest
<anchor xml:id="_test__compression_8py_source_1l00002"/>00002 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_test__compression_8py_source_1l00003"/>00003 <emphasis role="keyword">import</emphasis>&#32;compression&#32;<emphasis role="keyword">as</emphasis>&#32;comp
<anchor xml:id="_test__compression_8py_source_1l00004"/>00004 <emphasis role="keyword">import</emphasis>&#32;scipy.io
<anchor xml:id="_test__compression_8py_source_1l00005"/>00005 <emphasis role="keyword">from</emphasis>&#32;sklearn.metrics&#32;<emphasis role="keyword">import</emphasis>&#32;mean_squared_error
<anchor xml:id="_test__compression_8py_source_1l00006"/>00006 <emphasis role="keyword">import</emphasis>&#32;csv
<anchor xml:id="_test__compression_8py_source_1l00007"/>00007 <emphasis role="keyword">from</emphasis>&#32;csv_io&#32;<emphasis role="keyword">import</emphasis>&#32;ReadCSV,&#32;SaveCSV
<anchor xml:id="_test__compression_8py_source_1l00008"/>00008 
<anchor xml:id="_test__compression_8py_source_1l00009"/><link linkend="_classtest__compression_1_1_test_comp">00009</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp">TestComp</link>(unittest.TestCase):
<anchor xml:id="_test__compression_8py_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="preprocessor">@classmethod</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00011"/><link linkend="_classtest__compression_1_1_test_comp_1ac86c73ff4bb09de46d20296fcbcbd1af">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1ac86c73ff4bb09de46d20296fcbcbd1af">setUpClass</link>(cls):
<anchor xml:id="_test__compression_8py_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;n&#32;=&#32;5</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;cls.data&#32;=&#32;cls.load_pic()[0:n,&#32;0:n,&#32;0:n]</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;cls.data&#32;=&#32;cls.load_pic()</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00015"/>00015 
<anchor xml:id="_test__compression_8py_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;For&#32;Checking&#32;C&#32;vs&#32;Python</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00017"/><link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">00017</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>&#32;=&#32;ReadCSV(<emphasis role="stringliteral">&quot;data/test-images/indian_pines.csv&quot;</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00018"/>00018 
<anchor xml:id="_test__compression_8py_source_1l00019"/><link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">00019</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>&#32;=&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>.shape[0]
<anchor xml:id="_test__compression_8py_source_1l00020"/><link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">00020</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>&#32;=&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>.shape[1]
<anchor xml:id="_test__compression_8py_source_1l00021"/><link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>&#32;=&#32;cls.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>.shape[2]
<anchor xml:id="_test__compression_8py_source_1l00022"/>00022 &#32;&#32;&#32;&#32;
<anchor xml:id="_test__compression_8py_source_1l00023"/><link linkend="_classtest__compression_1_1_test_comp_1a7e18036fb4bf81697e8f0dd2d709a888">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a7e18036fb4bf81697e8f0dd2d709a888">test_CSV</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;z&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>):
<anchor xml:id="_test__compression_8py_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;y&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>):
<anchor xml:id="_test__compression_8py_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>):
<anchor xml:id="_test__compression_8py_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(str(x)&#32;+&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>,&#32;str(y)&#32;+&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>,&#32;str(z)&#32;+&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>[x,&#32;y&#32;,z])
<anchor xml:id="_test__compression_8py_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00029"/>00029 
<anchor xml:id="_test__compression_8py_source_1l00030"/><link linkend="_classtest__compression_1_1_test_comp_1a6f8e687cf87f06f265f8345e025fd290">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a6f8e687cf87f06f265f8345e025fd290">test_predictor</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;python_predicted,&#32;python_residuals&#32;=&#32;comp.predictor_debug(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SaveCSV(python_predicted,&#32;<emphasis role="stringliteral">&quot;./python_predicted.csv&quot;</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SaveCSV(python_residuals,&#32;<emphasis role="stringliteral">&quot;./python_residuals.csv&quot;</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00034"/>00034 
<anchor xml:id="_test__compression_8py_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c_predicted&#32;=&#32;ReadCSV(<emphasis role="stringliteral">&quot;../build/predictor.csv&quot;</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c_vs_python&#32;=&#32;c_predicted&#32;==&#32;python_predicted
<anchor xml:id="_test__compression_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SaveCSV(c_vs_python,&#32;<emphasis role="stringliteral">&quot;./c_vs_python.csv&quot;</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((c_vs_python).all())
<anchor xml:id="_test__compression_8py_source_1l00039"/>00039 
<anchor xml:id="_test__compression_8py_source_1l00040"/><link linkend="_classtest__compression_1_1_test_comp_1a9c3b7d7f89e7794b99b5d30b9e1b3c03">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a9c3b7d7f89e7794b99b5d30b9e1b3c03">test_unpredict</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped&#32;=&#32;comp.predictor(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unpredicted&#32;=&#32;comp.unpredictor(mapped,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((unpredicted&#32;==&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>).all())
<anchor xml:id="_test__compression_8py_source_1l00044"/>00044 
<anchor xml:id="_test__compression_8py_source_1l00045"/><link linkend="_classtest__compression_1_1_test_comp_1a9dd048a6a37c5628aa57a9301fe0e6a3">00045</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a9dd048a6a37c5628aa57a9301fe0e6a3">test_inv_GPO2</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;2576
<anchor xml:id="_test__compression_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;0
<anchor xml:id="_test__compression_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoded&#32;=&#32;comp.GPO2(k,&#32;value)
<anchor xml:id="_test__compression_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoded,&#32;i&#32;=&#32;comp.inv_GPO2(k,&#32;encoded,&#32;0)
<anchor xml:id="_test__compression_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(&quot;value&quot;,&#32;value)</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(&quot;len(encoded)&quot;,&#32;len(encoded))</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(&quot;encoded:&quot;,&#32;encoded)</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(&quot;decoded&quot;,&#32;decoded)</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(&quot;i&quot;,&#32;i)</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(value&#32;==&#32;decoded)
<anchor xml:id="_test__compression_8py_source_1l00056"/>00056 
<anchor xml:id="_test__compression_8py_source_1l00057"/><link linkend="_classtest__compression_1_1_test_comp_1a12de10b081d4d2ddbb1828ecb7fbf1a7">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a12de10b081d4d2ddbb1828ecb7fbf1a7">test_decompress</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoded&#32;=&#32;comp.encoder(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoded&#32;=&#32;comp.decoder(encoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((decoded&#32;==&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>).all())
<anchor xml:id="_test__compression_8py_source_1l00061"/>00061 
<anchor xml:id="_test__compression_8py_source_1l00062"/><link linkend="_classtest__compression_1_1_test_comp_1a5d6a83596562086f4bef51e7ce7e3ff8">00062</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a5d6a83596562086f4bef51e7ce7e3ff8">test_compression_algo</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped&#32;=&#32;comp.predictor(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoded&#32;=&#32;comp.encoder(mapped)
<anchor xml:id="_test__compression_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoded&#32;=&#32;comp.decoder(encoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unpredicted&#32;=&#32;comp.unpredictor(decoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((unpredicted&#32;==&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>).all())
<anchor xml:id="_test__compression_8py_source_1l00068"/>00068 
<anchor xml:id="_test__compression_8py_source_1l00069"/><link linkend="_classtest__compression_1_1_test_comp_1a73770f9898094fc643ccdf3f6e3e6450">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a73770f9898094fc643ccdf3f6e3e6450">test_rmse</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped&#32;=&#32;comp.predictor(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoded&#32;=&#32;comp.encoder(mapped)
<anchor xml:id="_test__compression_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoded&#32;=&#32;comp.decoder(encoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unpredicted&#32;=&#32;comp.unpredictor(decoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((unpredicted&#32;==&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>).all())
<anchor xml:id="_test__compression_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rmse&#32;=&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1acab599e43f76a42446f7d128db6142f5">rmse</link>(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>,&#32;unpredicted)
<anchor xml:id="_test__compression_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;RMSE:&#32;&quot;</emphasis>,&#32;rmse)
<anchor xml:id="_test__compression_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(rmse&#32;==&#32;0.0)
<anchor xml:id="_test__compression_8py_source_1l00078"/>00078 
<anchor xml:id="_test__compression_8py_source_1l00079"/><link linkend="_classtest__compression_1_1_test_comp_1a207b44f776c09bac2062fc6fe065aa9d">00079</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1a207b44f776c09bac2062fc6fe065aa9d">test_compression_ratio</link>(self):
<anchor xml:id="_test__compression_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped&#32;=&#32;comp.predictor(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>)
<anchor xml:id="_test__compression_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoded&#32;=&#32;comp.encoder(mapped)
<anchor xml:id="_test__compression_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoded&#32;=&#32;comp.decoder(encoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unpredicted&#32;=&#32;comp.unpredictor(decoded,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a5c7e4f16622600cb52580b191565e2dd">Nx</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1ac1452fdfd6ea1c8c005ac90bbfa62011">Ny</link>,&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1af3ec54a0e6bc4935a13fb520b7d7df6e">Nz</link>)
<anchor xml:id="_test__compression_8py_source_1l00084"/>00084 
<anchor xml:id="_test__compression_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rmse&#32;=&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1acab599e43f76a42446f7d128db6142f5">rmse</link>(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>,&#32;unpredicted)
<anchor xml:id="_test__compression_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ratio&#32;=&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1abb98cfaed1aee0349dde4e879c2ecb9e">compression_ratio</link>(self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>,&#32;encoded)
<anchor xml:id="_test__compression_8py_source_1l00087"/>00087 
<anchor xml:id="_test__compression_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;RMSE:&#32;&quot;</emphasis>,&#32;rmse)
<anchor xml:id="_test__compression_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;Compression&#32;Ratio:&#32;&quot;</emphasis>,&#32;ratio)
<anchor xml:id="_test__compression_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue((unpredicted&#32;==&#32;self.<link linkend="_classtest__compression_1_1_test_comp_1a511ae0b1c13f95e5f08f1a0dd3da3d93">data</link>).all())
<anchor xml:id="_test__compression_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(rmse&#32;==&#32;0.0)
<anchor xml:id="_test__compression_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(ratio&#32;&gt;&#32;1)
<anchor xml:id="_test__compression_8py_source_1l00093"/>00093 
<anchor xml:id="_test__compression_8py_source_1l00094"/><link linkend="_classtest__compression_1_1_test_comp_1a1a455a23bafc82e59390728276776d89">00094</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>load_pic(file_name=&quot;python/images/Indian_pines.mat&quot;,&#32;header=&quot;indian_pines&quot;):
<anchor xml:id="_test__compression_8py_source_1l00095"/>00095 
<anchor xml:id="_test__compression_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;scipy.io.loadmat(file_name)
<anchor xml:id="_test__compression_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;data[header]&#32;&#32;<emphasis role="comment">#&#32;data&#32;is&#32;dictionary,&#32;only&#32;take&#32;the&#32;array&#32;part</emphasis>
<anchor xml:id="_test__compression_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;np.array(data,&#32;dtype=np.int64)
<anchor xml:id="_test__compression_8py_source_1l00099"/>00099 
<anchor xml:id="_test__compression_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data
<anchor xml:id="_test__compression_8py_source_1l00101"/>00101 
<anchor xml:id="_test__compression_8py_source_1l00102"/><link linkend="_classtest__compression_1_1_test_comp_1acab599e43f76a42446f7d128db6142f5">00102</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1acab599e43f76a42446f7d128db6142f5">rmse</link>(self,&#32;data,&#32;decompressed):
<anchor xml:id="_test__compression_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data16int&#32;=&#32;np.array(data,&#32;dtype=np.uint16)
<anchor xml:id="_test__compression_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Nz&#32;=&#32;data16int.shape[2]
<anchor xml:id="_test__compression_8py_source_1l00105"/>00105 
<anchor xml:id="_test__compression_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error&#32;=&#32;0
<anchor xml:id="_test__compression_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;z&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(Nz):
<anchor xml:id="_test__compression_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error&#32;+=&#32;mean_squared_error(data16int[:,&#32;:,&#32;z],&#32;decompressed[:,&#32;:,&#32;z],&#32;squared=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_test__compression_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rmse&#32;=&#32;error&#32;/&#32;Nz
<anchor xml:id="_test__compression_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rmse
<anchor xml:id="_test__compression_8py_source_1l00111"/>00111 
<anchor xml:id="_test__compression_8py_source_1l00112"/><link linkend="_classtest__compression_1_1_test_comp_1abb98cfaed1aee0349dde4e879c2ecb9e">00112</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtest__compression_1_1_test_comp_1abb98cfaed1aee0349dde4e879c2ecb9e">compression_ratio</link>(self,&#32;data,&#32;compressed):
<anchor xml:id="_test__compression_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data.size&#32;*&#32;comp.D&#32;/&#32;len(compressed)
<anchor xml:id="_test__compression_8py_source_1l00114"/>00114 
<anchor xml:id="_test__compression_8py_source_1l00115"/>00115 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&quot;__main__&quot;</emphasis>:
<anchor xml:id="_test__compression_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;unittest.main()
</programlisting></section>
