<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_decoder_8c_source" xml:lang="en-US">
<title>decoder.c</title>
<indexterm><primary>src/decoder.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_decoder_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_decompressor_2decoder_8h">decompressor/decoder.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00002"/>00002 
<anchor xml:id="_decoder_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;inttypes.h&gt;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;time.h&gt;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00005"/>00005 
<anchor xml:id="_decoder_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stream__encoder_8h">encoder/stream_encoder.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_var_int_file___i_o_8h">files/varIntFile_IO.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_math__functions_8h">math/math_functions.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_var_int_file___i_o_8h">files/varIntFile_IO.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_encoder__constants_8h">constants/encoder_constants.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_body_8h">encoder/body.h</link>&quot;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00012"/>00012 
<anchor xml:id="_decoder_8c_source_1l00013"/>00013 <emphasis role="comment">//&#32;int&#32;K&#32;=&#32;0;&#32;//&#32;CLIP(ACCUMULATOR_INITIALIZATION_CONSTANT,&#32;0,&#32;MIN(D-2,&#32;14));</emphasis>
<anchor xml:id="_decoder_8c_source_1l00014"/>00014 <emphasis role="comment">//&#32;unsigned&#32;int&#32;U_max&#32;=&#32;CLIP(UNARY_LENGTH_LIMIT,&#32;8,&#32;32);</emphasis>
<anchor xml:id="_decoder_8c_source_1l00015"/>00015 <emphasis role="comment">//&#32;int&#32;Gamma1&#32;=&#32;1;</emphasis>
<anchor xml:id="_decoder_8c_source_1l00016"/>00016 
<anchor xml:id="_decoder_8c_source_1l00017"/><link linkend="_decoder_8c_1aeb5d9c2d8630941218ec7b26a666bd61">00017</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_decoder_8c_1aeb5d9c2d8630941218ec7b26a666bd61">increment_xyz</link>(<emphasis role="keywordtype">int</emphasis>&#32;*x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*y,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*z,&#32;<link linkend="_math__functions_8h_1ab461b1f8f4aeb9fff4c299b4aeb2103b">DIM</link>&#32;<link linkend="_constants_8h_1abfda77b016218238359bcc3e5c1600b0">Nx</link>,&#32;<link linkend="_math__functions_8h_1ab461b1f8f4aeb9fff4c299b4aeb2103b">DIM</link>&#32;<link linkend="_constants_8h_1adcc9183c4659dc09e04e5ede1d79215b">Ny</link>,&#32;<link linkend="_math__functions_8h_1ab461b1f8f4aeb9fff4c299b4aeb2103b">DIM</link>&#32;<link linkend="_constants_8h_1a7a7576e08f5980d322da5f48c7385edc">Nz</link>)&#32;{
<anchor xml:id="_decoder_8c_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*x&#32;&lt;&#32;<link linkend="_constants_8h_1abfda77b016218238359bcc3e5c1600b0">Nx</link>&#32;-&#32;1)&#32;
<anchor xml:id="_decoder_8c_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*x)++;
<anchor xml:id="_decoder_8c_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_decoder_8c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*y&#32;&lt;&#32;<link linkend="_constants_8h_1adcc9183c4659dc09e04e5ede1d79215b">Ny</link>&#32;-&#32;1)&#32;
<anchor xml:id="_decoder_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*x&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*y)++;
<anchor xml:id="_decoder_8c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*z&#32;&lt;&#32;<link linkend="_constants_8h_1a7a7576e08f5980d322da5f48c7385edc">Nz</link>&#32;-&#32;1)&#32;
<anchor xml:id="_decoder_8c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*x&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*y&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*z)++;
<anchor xml:id="_decoder_8c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00037"/>00037 }
<anchor xml:id="_decoder_8c_source_1l00038"/>00038 
<anchor xml:id="_decoder_8c_source_1l00039"/>00039 
<anchor xml:id="_decoder_8c_source_1l00040"/><link linkend="_decompressor_2decoder_8h_1aed4e95d0c6d50bc3f99264337e2f9fb8">00040</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_decoder_8c_1aed4e95d0c6d50bc3f99264337e2f9fb8">Decoder_DecodeBody</link>(<link linkend="_structimage">image</link>*&#32;predicted_samples,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file_name){
<anchor xml:id="_decoder_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;data&#32;=&#32;1;
<anchor xml:id="_decoder_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;y,&#32;z;
<anchor xml:id="_decoder_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;K_ZPRIME&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_encoder__constants_8h_1a2689c4b3931025b79053532a5f1b0a85">K</link>&#32;&lt;=&#32;30&#32;-&#32;<link linkend="_constants_8h_1abf6d0ccec2f5157184071729f129de19">D</link>)
<anchor xml:id="_decoder_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;K_ZPRIME&#32;=&#32;<link linkend="_encoder__constants_8h_1a2689c4b3931025b79053532a5f1b0a85">K</link>;
<anchor xml:id="_decoder_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_decoder_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;K_ZPRIME&#32;=&#32;2&#32;*&#32;<link linkend="_encoder__constants_8h_1a2689c4b3931025b79053532a5f1b0a85">K</link>&#32;+&#32;<link linkend="_constants_8h_1abf6d0ccec2f5157184071729f129de19">D</link>&#32;-&#32;30;
<anchor xml:id="_decoder_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<link linkend="_structdim3">dim3</link>&#32;sz&#32;=&#32;predicted_samples-&gt;<link linkend="_structimage_1a92c57811a03d78e56a6e8592f96a41ad">size</link>;
<anchor xml:id="_decoder_8c_source_1l00053"/>00053 
<anchor xml:id="_decoder_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;uint32_t&#32;gamma;
<anchor xml:id="_decoder_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;uint32_t&#32;epsilon_z;
<anchor xml:id="_decoder_8c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>;
<anchor xml:id="_decoder_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;uint32_t&#32;k_z;
<anchor xml:id="_decoder_8c_source_1l00058"/>00058 
<anchor xml:id="_decoder_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link>&#32;*log&#32;=&#32;<link linkend="_file___i_o_8h_1a05d25080a4592a86386f6d0d3d48496c">F_OPEN</link>(<emphasis role="stringliteral">&quot;../data/logs/c-decoder-debug.LOG&quot;</emphasis>,&#32;<link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a61aa7ff70b76bff0fda378cf61d6afbc">WRITE</link>);
<anchor xml:id="_decoder_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<link linkend="_struct_var_unsigned_int_file">VUF</link>&#32;stream;
<anchor xml:id="_decoder_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1a07ca21a87dab6f536b7f4d69050f5602">VUF_initialize</link>(&amp;stream,&#32;file_name,&#32;1);
<anchor xml:id="_decoder_8c_source_1l00062"/>00062 
<anchor xml:id="_decoder_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;time_t&#32;start&#32;=&#32;time(<link linkend="_math__functions_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
<anchor xml:id="_decoder_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)&#32;{&#32;<emphasis role="comment">//TODO&#32;/*stream&#32;not&#32;empty*/</emphasis>
<anchor xml:id="_decoder_8c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;==&#32;0&#32;&amp;&amp;&#32;y&#32;==&#32;0)&#32;{
<anchor xml:id="_decoder_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gamma&#32;=&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(<link linkend="_encoder__constants_8h_1a14069285fee7428b1929cb23a4b1561c">Gamma1</link>);
<anchor xml:id="_decoder_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_z&#32;=&#32;((3&#32;*&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;int)<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(K_ZPRIME&#32;+&#32;6)&#32;-&#32;49)&#32;*&#32;gamma)&#32;/&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(7);
<anchor xml:id="_decoder_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Then&#32;read&#32;the&#32;first&#32;code&#32;word,&#32;which&#32;has&#32;len&#32;D</emphasis>
<anchor xml:id="_decoder_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>&#32;=&#32;<link linkend="_var_int_file___i_o_8h_1aafa9034f88afca6a726a84673d063889">VUF_read_stack</link>(&amp;stream,&#32;<link linkend="_constants_8h_1abf6d0ccec2f5157184071729f129de19">D</link>);
<anchor xml:id="_decoder_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_image_8h_1aefaa1253ccc17864ac32b9d685b821d4">SetPixel</link>(predicted_samples,&#32;x,&#32;y,&#32;z,&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>);
<anchor xml:id="_decoder_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_decoder_8c_1aeb5d9c2d8630941218ec7b26a666bd61">increment_xyz</link>(&amp;x,&#32;&amp;y,&#32;&amp;z,&#32;sz.<link linkend="_structdim3_1a098d7fd50051a60dd6764a3b94978064">x</link>,&#32;sz.<link linkend="_structdim3_1a2be1654d9b9e6915687f11ac13ef2f8b">y</link>,&#32;sz.<link linkend="_structdim3_1a369004c0d58468e2b5a09c22d6608e1b">z</link>);
<anchor xml:id="_decoder_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00074"/>00074 
<anchor xml:id="_decoder_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(2&#32;*&#32;gamma&#32;&gt;&#32;epsilon_z&#32;+&#32;(<emphasis role="keywordtype">int</emphasis>)(((<emphasis role="keywordtype">float</emphasis>)49&#32;*&#32;gamma)&#32;/&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(7)))&#32;{
<anchor xml:id="_decoder_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k_z&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_decoder_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;<link linkend="_constants_8h_1abf6d0ccec2f5157184071729f129de19">D</link>;&#32;i&#32;&gt;=&#32;0;&#32;i--)
<anchor xml:id="_decoder_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((gamma&#32;*&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(i))&#32;&lt;=&#32;(epsilon_z&#32;+&#32;((49u&#32;*&#32;gamma)&#32;&gt;&gt;&#32;7)))
<anchor xml:id="_decoder_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_decoder_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k_z&#32;=&#32;i;
<anchor xml:id="_decoder_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00087"/>00087 
<anchor xml:id="_decoder_8c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inverse&#32;GolombPowerTwo</emphasis>
<anchor xml:id="_decoder_8c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit;
<anchor xml:id="_decoder_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;j;
<anchor xml:id="_decoder_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;q&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)&#32;{&#32;<emphasis role="comment">/*&#32;Stream&#32;not&#32;empty&#32;&amp;&amp;&#32;*/</emphasis>
<anchor xml:id="_decoder_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bit&#32;=&#32;<link linkend="_var_int_file___i_o_8h_1aafa9034f88afca6a726a84673d063889">VUF_read_stack</link>(&amp;stream,&#32;1);
<anchor xml:id="_decoder_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;==&#32;1)&#32;
<anchor xml:id="_decoder_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00096"/>00096 
<anchor xml:id="_decoder_8c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q++;
<anchor xml:id="_decoder_8c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(q&#32;==&#32;<link linkend="_encoder__constants_8h_1a706ff4e6123594c36b0894c248a25ff7">U_max</link>)&#32;
<anchor xml:id="_decoder_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_decoder_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00101"/>00101 
<anchor xml:id="_decoder_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(q&#32;==&#32;<link linkend="_encoder__constants_8h_1a706ff4e6123594c36b0894c248a25ff7">U_max</link>)&#32;{
<anchor xml:id="_decoder_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>&#32;=&#32;<link linkend="_var_int_file___i_o_8h_1aafa9034f88afca6a726a84673d063889">VUF_read_stack</link>(&amp;stream,&#32;<link linkend="_constants_8h_1abf6d0ccec2f5157184071729f129de19">D</link>);
<anchor xml:id="_decoder_8c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_decoder_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k_z&#32;==&#32;0)&#32;{
<anchor xml:id="_decoder_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>&#32;=&#32;0;
<anchor xml:id="_decoder_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_decoder_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>&#32;=&#32;<link linkend="_var_int_file___i_o_8h_1aafa9034f88afca6a726a84673d063889">VUF_read_stack</link>(&amp;stream,&#32;k_z);
<anchor xml:id="_decoder_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>&#32;+=&#32;q&#32;*&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(k_z);
<anchor xml:id="_decoder_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00113"/>00113 
<anchor xml:id="_decoder_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_image_8h_1aefaa1253ccc17864ac32b9d685b821d4">SetPixel</link>(predicted_samples,&#32;x,&#32;y,&#32;z,&#32;<link linkend="_reconstructor_8c_1af83a02e01aaaa90418285249879dd545">sample</link>);
<anchor xml:id="_decoder_8c_source_1l00115"/>00115 
<anchor xml:id="_decoder_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(x&#32;==&#32;sz.<link linkend="_structdim3_1a098d7fd50051a60dd6764a3b94978064">x</link>&#32;-&#32;1&#32;&amp;&amp;&#32;y&#32;==&#32;sz.<link linkend="_structdim3_1a2be1654d9b9e6915687f11ac13ef2f8b">y</link>&#32;-&#32;1&#32;&amp;&amp;&#32;z&#32;==&#32;sz.<link linkend="_structdim3_1a369004c0d58468e2b5a09c22d6608e1b">z</link>&#32;-&#32;1))&#32;{
<anchor xml:id="_decoder_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_decoder_8c_1aeb5d9c2d8630941218ec7b26a666bd61">increment_xyz</link>(&amp;x,&#32;&amp;y,&#32;&amp;z,&#32;sz.<link linkend="_structdim3_1a098d7fd50051a60dd6764a3b94978064">x</link>,&#32;sz.<link linkend="_structdim3_1a2be1654d9b9e6915687f11ac13ef2f8b">y</link>,&#32;sz.<link linkend="_structdim3_1a369004c0d58468e2b5a09c22d6608e1b">z</link>);
<anchor xml:id="_decoder_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_decoder_8c_source_1l00119"/>00119 
<anchor xml:id="_decoder_8c_source_1l00120"/>00120 
<anchor xml:id="_decoder_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(gamma&#32;&lt;&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(<link linkend="_body_8h_1a0bbf3cd743f1631577f828fa3d85ccf7">GAMMA_STAR</link>)&#32;-&#32;1)&#32;{
<anchor xml:id="_decoder_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_z&#32;+=&#32;data;
<anchor xml:id="_decoder_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gamma++;
<anchor xml:id="_decoder_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(gamma&#32;==&#32;<link linkend="_math__functions_8h_1a60b4b9f1152371307ebadc232149699c">BPOW</link>(<link linkend="_body_8h_1a0bbf3cd743f1631577f828fa3d85ccf7">GAMMA_STAR</link>)&#32;-&#32;1)&#32;{
<anchor xml:id="_decoder_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_z&#32;=&#32;(epsilon_z&#32;+&#32;data&#32;+&#32;1)&#32;/&#32;2;
<anchor xml:id="_decoder_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gamma&#32;=&#32;(gamma&#32;+&#32;1)&#32;/&#32;2;
<anchor xml:id="_decoder_8c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="_decoder_8c_source_1l00130"/>00130 
<anchor xml:id="_decoder_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1ad54b8d6492e4c149c7f1232e3eda58be">VUF_close</link>(&amp;stream);
<anchor xml:id="_decoder_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;time_t&#32;end&#32;=&#32;time(<link linkend="_math__functions_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
<anchor xml:id="_decoder_8c_source_1l00133"/>00133 }
<anchor xml:id="_decoder_8c_source_1l00134"/>00134 
<anchor xml:id="_decoder_8c_source_1l00135"/><link linkend="_decompressor_2decoder_8h_1a760ca18536e4e5b09a2cad3509f700ba">00135</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_decoder_8c_1a760ca18536e4e5b09a2cad3509f700ba">TestDecoder</link>(<emphasis role="keywordtype">char</emphasis>*&#32;filename)&#32;{
<anchor xml:id="_decoder_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Testing&#32;Decoder...\n&quot;</emphasis>);
<anchor xml:id="_decoder_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;TODO&#32;*/</emphasis>
<anchor xml:id="_decoder_8c_source_1l00138"/>00138 }
</programlisting></section>
