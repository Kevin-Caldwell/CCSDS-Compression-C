<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_file___i_o_8h" xml:lang="en-US">
<title>include/files/file_IO.h File Reference</title>
<indexterm><primary>include/files/file_IO.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;inttypes.h&gt;<?linebreak?>#include &lt;stddef.h&gt;<?linebreak?>#include &lt;stdio.h&gt;<?linebreak?></programlisting>Include dependency graph for file_IO.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d8/dc1/file___i_o_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d8/d56/file___i_o_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef FILE <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link></para>

<para>File Handling Abstractions. </para>
</listitem>
            <listitem><para>typedef enum <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6">file_mode</link> <link linkend="_file___i_o_8h_1abf7662b304505130b2e87a944038aff0">FileMode</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6">file_mode</link> { <?linebreak?><link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6acb9be765f361bb7efb9073730aac92c6">READ</link> = 0
, <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a61aa7ff70b76bff0fda378cf61d6afbc">WRITE</link>
, <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6af38784ef4b08f294d4a78f62181729a0">APPEND</link>
, <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a8766471eed07b5c5db8f7e9b5bf0e13e">READ_AND_WRITE</link>
, <?linebreak?><link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a493a40eded29a96303feede4ff801f9d">WRITING_AND_READING</link>
, <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6ae84d332f7224e720a386f17024af73d5">APPENDING_AND_READING</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * <link linkend="_file___i_o_8h_1a05d25080a4592a86386f6d0d3d48496c">F_OPEN</link> (const char *file_name, <link linkend="_file___i_o_8h_1abf7662b304505130b2e87a944038aff0">FileMode</link> open_mode)</para>
</listitem>
            <listitem><para>size_t <link linkend="_file___i_o_8h_1a94d988ea4ce93357f56c0191584246a6">F_WRITE</link> (const void *write_ptr, size_t member_size, size_t member_count, <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> *file_ptr)</para>
</listitem>
            <listitem><para>size_t <link linkend="_file___i_o_8h_1a6d14febd2771048b4a06dd86ea17718d">F_READ</link> (void *destination, size_t size, size_t arr_length, <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> *file_stream)</para>
</listitem>
            <listitem><para>int <link linkend="_file___i_o_8h_1ad62e6a72675aa7b389460e97f4e6d998">F_CLOSE</link> (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> *stream)</para>
</listitem>
            <listitem><para>int <link linkend="_file___i_o_8h_1a4b306680e215dfe285fa220421141d38">F_EMPTY</link> (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> *stream)</para>
</listitem>
            <listitem><para>int <link linkend="_file___i_o_8h_1a3ac9e7bef40307b69bdf5e0cb6904d83">F_SEEK</link> (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> *stream, long int <link linkend="_sample__representative_8h_1a0ed063d2db07cb63fecfb70cffec43f1">offset</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>const char * <link linkend="_file___i_o_8h_1aed9fcf257d5879cc1d4a649543e3cd12">file_modes_str</link> []</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088"/><section>
    <title>file_t</title>
<indexterm><primary>file_t</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>file_t</secondary></indexterm>
<para><computeroutput>typedef FILE <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link></computeroutput></para><para>

<para>File Handling Abstractions. </para>
</para>

<para><link linkend="_file___i_o_8h">file_IO.h</link> <formalpara><title>Author</title>

<para>Kevin Caldwell</para>
</formalpara>
Abstracted Functions for File IO. Implementation in <link linkend="_file___i_o_8c">file_IO.c</link> should be adapted to fit the respective file system.</para>

<para>The datatype used throughout the code is file_t. </para>
<para>
Definition at line <link linkend="_file___i_o_8h_source_1l00022">22</link> of file <link linkend="_file___i_o_8h_source">file_IO.h</link>.</para>
</section>
<anchor xml:id="_file___i_o_8h_1abf7662b304505130b2e87a944038aff0"/><section>
    <title>FileMode</title>
<indexterm><primary>FileMode</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>FileMode</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6">file_mode</link> <link linkend="_file___i_o_8h_1abf7662b304505130b2e87a944038aff0">FileMode</link></computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6"/><section>
    <title>file_mode</title>
<indexterm><primary>file_mode</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>file_mode</secondary></indexterm>
<para><computeroutput>enum <link linkend="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6">file_mode</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>READ</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>READ</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6acb9be765f361bb7efb9073730aac92c6"/>READ</entry><entry></entry></row><row><entry><indexterm><primary>WRITE</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>WRITE</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a61aa7ff70b76bff0fda378cf61d6afbc"/>WRITE</entry><entry></entry></row><row><entry><indexterm><primary>APPEND</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>APPEND</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6af38784ef4b08f294d4a78f62181729a0"/>APPEND</entry><entry></entry></row><row><entry><indexterm><primary>READ_AND_WRITE</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>READ_AND_WRITE</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a8766471eed07b5c5db8f7e9b5bf0e13e"/>READ_AND_WRITE</entry><entry></entry></row><row><entry><indexterm><primary>WRITING_AND_READING</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>WRITING_AND_READING</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6a493a40eded29a96303feede4ff801f9d"/>WRITING_AND_READING</entry><entry></entry></row><row><entry><indexterm><primary>APPENDING_AND_READING</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>APPENDING_AND_READING</secondary></indexterm>
<anchor xml:id="_file___i_o_8h_1a588666511dde277029c4c5afc30782a6ae84d332f7224e720a386f17024af73d5"/>APPENDING_AND_READING</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_file___i_o_8h_source_1l00024">24</link> of file <link linkend="_file___i_o_8h_source">file_IO.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_file___i_o_8h_1ad62e6a72675aa7b389460e97f4e6d998"/><section>
    <title>F_CLOSE()</title>
<indexterm><primary>F_CLOSE</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_CLOSE</secondary></indexterm>
<para><computeroutput>int F_CLOSE (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * stream)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00026">26</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_ad62e6a72675aa7b389460e97f4e6d998_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_file___i_o_8h_1a4b306680e215dfe285fa220421141d38"/><section>
    <title>F_EMPTY()</title>
<indexterm><primary>F_EMPTY</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_EMPTY</secondary></indexterm>
<para><computeroutput>int F_EMPTY (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * stream)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00030">30</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
</section>
<anchor xml:id="_file___i_o_8h_1a05d25080a4592a86386f6d0d3d48496c"/><section>
    <title>F_OPEN()</title>
<indexterm><primary>F_OPEN</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_OPEN</secondary></indexterm>
<para><computeroutput><link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * F_OPEN (const char * file_name, <link linkend="_file___i_o_8h_1abf7662b304505130b2e87a944038aff0">FileMode</link> open_mode)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00011">11</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_a05d25080a4592a86386f6d0d3d48496c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_a05d25080a4592a86386f6d0d3d48496c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_file___i_o_8h_1a6d14febd2771048b4a06dd86ea17718d"/><section>
    <title>F_READ()</title>
<indexterm><primary>F_READ</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_READ</secondary></indexterm>
<para><computeroutput>size_t F_READ (void * destination, size_t size, size_t arr_length, <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * file_stream)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00022">22</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_a6d14febd2771048b4a06dd86ea17718d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_file___i_o_8h_1a3ac9e7bef40307b69bdf5e0cb6904d83"/><section>
    <title>F_SEEK()</title>
<indexterm><primary>F_SEEK</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_SEEK</secondary></indexterm>
<para><computeroutput>int F_SEEK (<link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * stream, long int offset)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00034">34</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_a3ac9e7bef40307b69bdf5e0cb6904d83_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_file___i_o_8h_1a94d988ea4ce93357f56c0191584246a6"/><section>
    <title>F_WRITE()</title>
<indexterm><primary>F_WRITE</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>F_WRITE</secondary></indexterm>
<para><computeroutput>size_t F_WRITE (const void * write_ptr, size_t member_size, size_t member_count, <link linkend="_file___i_o_8h_1aaa4f66633ab727c9d841db141c3da088">file_t</link> * file_ptr)</computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00018">18</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../d9/d7f/file___i_o_8h_a94d988ea4ce93357f56c0191584246a6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_file___i_o_8h_1aed9fcf257d5879cc1d4a649543e3cd12"/><section>
    <title>file_modes_str</title>
<indexterm><primary>file_modes_str</primary><secondary>file_IO.h</secondary></indexterm>
<indexterm><primary>file_IO.h</primary><secondary>file_modes_str</secondary></indexterm>
<para><computeroutput>const char* file_modes_str[]<computeroutput>[extern]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_file___i_o_8c_source_1l00005">5</link> of file <link linkend="_file___i_o_8c_source">file_IO.c</link>.</para>
</section>
</section>
</section>
