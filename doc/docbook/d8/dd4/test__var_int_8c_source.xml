<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__var_int_8c_source" xml:lang="en-US">
<title>test_varInt.c</title>
<indexterm><primary>src/test_varInt.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test__var_int_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_test__var_int_8h">testing/test_varInt.h</link>&quot;</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_logs_8h">files/logs.h</link>&quot;</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_global__constants_8h">constants/global_constants.h</link>&quot;</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00004"/>00004 
<anchor xml:id="_test__var_int_8c_source_1l00005"/><link linkend="_test__var_int_8c_1a553dc49f84a0874f09d55f9e84fb31d2">00005</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_test__var_int_8c_1a553dc49f84a0874f09d55f9e84fb31d2">printBits</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;size,&#32;<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;ptr)
<anchor xml:id="_test__var_int_8c_source_1l00006"/>00006 {
<anchor xml:id="_test__var_int_8c_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*b&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)&#32;ptr;
<anchor xml:id="_test__var_int_8c_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;byte;
<anchor xml:id="_test__var_int_8c_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;j;
<anchor xml:id="_test__var_int_8c_source_1l00010"/>00010 &#32;&#32;&#32;&#32;
<anchor xml:id="_test__var_int_8c_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;size-1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
<anchor xml:id="_test__var_int_8c_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j&#32;=&#32;7;&#32;j&#32;&gt;=&#32;0;&#32;j--)&#32;{
<anchor xml:id="_test__var_int_8c_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;=&#32;(b[i]&#32;&gt;&gt;&#32;j)&#32;&amp;&#32;1;
<anchor xml:id="_test__var_int_8c_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%u&quot;</emphasis>,&#32;<emphasis role="keywordtype">byte</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_test__var_int_8c_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;|&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00017"/>00017 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__var_int_8c_source_1l00018"/>00018 }
<anchor xml:id="_test__var_int_8c_source_1l00019"/>00019 
<anchor xml:id="_test__var_int_8c_source_1l00020"/><link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">00020</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">print_buffer</link>(<link linkend="_struct_var_unsigned_int_file">VUF</link>*&#32;f){
<anchor xml:id="_test__var_int_8c_source_1l00021"/>00021 
<anchor xml:id="_test__var_int_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_stream__encoder_8h_1af7b7dc9a200cb1404c280bd500fd1551">BUFFER_LENGTH</link>;&#32;i++){
<anchor xml:id="_test__var_int_8c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:\t&quot;</emphasis>,&#32;i);
<anchor xml:id="_test__var_int_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_test__var_int_8c_1a553dc49f84a0874f09d55f9e84fb31d2">printBits</link>(4,&#32;f-&gt;<link linkend="_struct_var_unsigned_int_file_1ab4d491f08cdd6da71b95cf04059412c6">rw_buffer</link>&#32;+&#32;i);
<anchor xml:id="_test__var_int_8c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;%08X&quot;</emphasis>,&#32;f-&gt;<link linkend="_struct_var_unsigned_int_file_1ab4d491f08cdd6da71b95cf04059412c6">rw_buffer</link>[i]);
<anchor xml:id="_test__var_int_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__var_int_8c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for(int&#32;i&#32;=&#32;BUFFER_LENGTH&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;i--){</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;printf(&quot;%#10x&#32;:%d\n&quot;,&#32;f-&gt;rw_buffer[i],&#32;i);</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;BIT&#32;INDEX:&#32;%d\n&quot;</emphasis>,&#32;f-&gt;<link linkend="_struct_var_unsigned_int_file_1a97194a18c4b1d8f274a42c431ebab9e4">bit_index</link>);
<anchor xml:id="_test__var_int_8c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;BYTE&#32;INDEX:&#32;%d\n&quot;</emphasis>,&#32;f-&gt;<link linkend="_struct_var_unsigned_int_file_1a655357dd976f916aed3eb30bc0a694d9">byte_index</link>);
<anchor xml:id="_test__var_int_8c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00034"/>00034 }
<anchor xml:id="_test__var_int_8c_source_1l00035"/>00035 
<anchor xml:id="_test__var_int_8c_source_1l00036"/><link linkend="_test__var_int_8h_1af925d49ae82dafea37f82c0d044a6308">00036</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test__var_int_8c_1af925d49ae82dafea37f82c0d044a6308">testVUF_Write</link>()&#32;{
<anchor xml:id="_test__var_int_8c_source_1l00037"/>00037 
<anchor xml:id="_test__var_int_8c_source_1l00038"/>00038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;LOG</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<link linkend="_logs_8h_1a61353ebf0328d8bd1f61f224305e64bb">Log_add</link>(<emphasis role="stringliteral">&quot;Testing&#32;VUF&#32;File&#32;Write&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00040"/>00040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_test__var_int_8c_source_1l00041"/>00041 
<anchor xml:id="_test__var_int_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;array[]&#32;=&#32;{4,&#32;4,&#32;1,&#32;23,&#32;32,&#32;32,&#32;32,&#32;5,&#32;5,&#32;25};
<anchor xml:id="_test__var_int_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;10;
<anchor xml:id="_test__var_int_8c_source_1l00044"/>00044 
<anchor xml:id="_test__var_int_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<link linkend="_struct_var_unsigned_int_file">VUF</link>&#32;stream;
<anchor xml:id="_test__var_int_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filename&#32;=&#32;<emphasis role="stringliteral">&quot;data/test-images/test.vuf&quot;</emphasis>;
<anchor xml:id="_test__var_int_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1a07ca21a87dab6f536b7f4d69050f5602">VUF_initialize</link>(&amp;stream,&#32;filename,&#32;<link linkend="_var_int_file___i_o_8h_1a65ff8d4f12985f7d5210a0688be998dca43ace450ee0d4bf5400727c62d98eccc">WRITE_BINARY</link>);
<anchor xml:id="_test__var_int_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">print_buffer</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Opened&#32;File.\n&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00050"/>00050 
<anchor xml:id="_test__var_int_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;uint32_t&#32;bounce&#32;=&#32;-1;
<anchor xml:id="_test__var_int_8c_source_1l00052"/>00052 
<anchor xml:id="_test__var_int_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++){
<anchor xml:id="_test__var_int_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Writing&#32;%d&#32;Digits&#32;of&#32;%d\n&quot;</emphasis>,&#32;array[i],&#32;bounce);
<anchor xml:id="_test__var_int_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1a744805d2f1db68081efadb9892a297e9">VUF_append</link>(&amp;stream,&#32;bounce,&#32;array[i]);
<anchor xml:id="_test__var_int_8c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">print_buffer</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounce&#32;=&#32;bounce&#32;?&#32;0&#32;:&#32;-1;
<anchor xml:id="_test__var_int_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_test__var_int_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__var_int_8c_source_1l00060"/>00060 
<anchor xml:id="_test__var_int_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1ad54b8d6492e4c149c7f1232e3eda58be">VUF_close</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test__var_int_8c_source_1l00063"/>00063 }
<anchor xml:id="_test__var_int_8c_source_1l00064"/>00064 
<anchor xml:id="_test__var_int_8c_source_1l00065"/><link linkend="_test__var_int_8h_1aaac61ccbc34855ae728a8a9d45db1105">00065</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test__var_int_8c_1aaac61ccbc34855ae728a8a9d45db1105">testVUF_Read</link>(){
<anchor xml:id="_test__var_int_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;array[]&#32;=&#32;{4,&#32;4,&#32;1,&#32;23,&#32;32,&#32;32,&#32;32,&#32;5,&#32;5,&#32;25};
<anchor xml:id="_test__var_int_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;10;
<anchor xml:id="_test__var_int_8c_source_1l00068"/>00068 
<anchor xml:id="_test__var_int_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<link linkend="_struct_var_unsigned_int_file">VUF</link>&#32;stream;
<anchor xml:id="_test__var_int_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filename&#32;=&#32;<emphasis role="stringliteral">&quot;data/test-images/test.vuf&quot;</emphasis>;
<anchor xml:id="_test__var_int_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1a07ca21a87dab6f536b7f4d69050f5602">VUF_initialize</link>(&amp;stream,&#32;filename,&#32;<link linkend="_var_int_file___i_o_8h_1a65ff8d4f12985f7d5210a0688be998dcae04a4d33d75ca7df3b250e69c2869be8">READ_BINARY</link>);
<anchor xml:id="_test__var_int_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">print_buffer</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Opened&#32;File.\n&quot;</emphasis>);
<anchor xml:id="_test__var_int_8c_source_1l00074"/>00074 
<anchor xml:id="_test__var_int_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;uint32_t&#32;bounce&#32;=&#32;0;
<anchor xml:id="_test__var_int_8c_source_1l00076"/>00076 
<anchor xml:id="_test__var_int_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++){
<anchor xml:id="_test__var_int_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;IDNEEEX&#32;%d\n&quot;</emphasis>,&#32;i);
<anchor xml:id="_test__var_int_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;INDEX:&#32;%d\n&quot;</emphasis>,&#32;array[i]);
<anchor xml:id="_test__var_int_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;read&#32;=&#32;<link linkend="_var_int_file___i_o_8h_1aafa9034f88afca6a726a84673d063889">VUF_read_stack</link>(&amp;stream,&#32;array[i]);
<anchor xml:id="_test__var_int_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;POPPPED:&#32;%08X\t%0u\n&quot;</emphasis>,&#32;read,&#32;read);
<anchor xml:id="_test__var_int_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_test__var_int_8c_1a573e4df8190dae4209a0f027d77fb942">print_buffer</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__var_int_8c_source_1l00084"/>00084 
<anchor xml:id="_test__var_int_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<link linkend="_var_int_file___i_o_8h_1ad54b8d6492e4c149c7f1232e3eda58be">VUF_close</link>(&amp;stream);
<anchor xml:id="_test__var_int_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test__var_int_8c_source_1l00087"/>00087 }
</programlisting></section>
