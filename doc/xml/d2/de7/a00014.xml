<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d2/de7/a00014" kind="file" language="Python">
    <compoundname>perlin_image.py</compoundname>
    <innernamespace refid="dc/d59/a00364">perlin_image</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="dc/d59/a00364" refkind="compound"><highlight class="comment">#<sp/>https://github.com/pvigier/perlin-numpy/tree/master/perlin_numpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="dc/d59/a00364_1a3fa1574eb32a9a437f406b678d378c99" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="dc/d59/a00364_1a3fa1574eb32a9a437f406b678d378c99" kindref="member">interpolant</ref>(t):</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t*t*t*(t*(t*6<sp/>-<sp/>15)<sp/>+<sp/>10)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="dc/d59/a00364_1a8f0a805cc15da261cccfb8ee1b927e2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="dc/d59/a00364_1a8f0a805cc15da261cccfb8ee1b927e2e" kindref="member">generate_perlin_noise_3d</ref>(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,<sp/>res,<sp/>tileable=(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolant=interpolant</highlight></codeline>
<codeline lineno="12"><highlight class="normal">):</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Generate<sp/>a<sp/>3D<sp/>numpy<sp/>array<sp/>of<sp/>perlin<sp/>noise.</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape:<sp/>The<sp/>shape<sp/>of<sp/>the<sp/>generated<sp/>array<sp/>(tuple<sp/>of<sp/>three<sp/>ints).</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>res.</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res:<sp/>The<sp/>number<sp/>of<sp/>periods<sp/>of<sp/>noise<sp/>to<sp/>generate<sp/>along<sp/>each</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>(tuple<sp/>of<sp/>three<sp/>ints).<sp/>Note<sp/>shape<sp/>must<sp/>be<sp/>a<sp/>multiple</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>res.</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tileable:<sp/>If<sp/>the<sp/>noise<sp/>should<sp/>be<sp/>tileable<sp/>along<sp/>each<sp/>axis</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tuple<sp/>of<sp/>three<sp/>bools).<sp/>Defaults<sp/>to<sp/>(False,<sp/>False,<sp/>False).</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolant:<sp/>The<sp/>interpolation<sp/>function,<sp/>defaults<sp/>to</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t*t*t*(t*(t*6<sp/>-<sp/>15)<sp/>+<sp/>10).</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>of<sp/>shape<sp/>shape<sp/>with<sp/>the<sp/>generated<sp/>noise.</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueError:<sp/>If<sp/>shape<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of<sp/>res.</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>(res[0]<sp/>/<sp/>shape[0],<sp/>res[1]<sp/>/<sp/>shape[1],<sp/>res[2]<sp/>/<sp/>shape[2])</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(shape[0]<sp/>//<sp/>res[0],<sp/>shape[1]<sp/>//<sp/>res[1],<sp/>shape[2]<sp/>//<sp/>res[2])</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>grid<sp/>=<sp/>np.mgrid[0:res[0]:delta[0],0:res[1]:delta[1],0:res[2]:delta[2]]</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>grid<sp/>=<sp/>np.mgrid[0:res[0]:delta[0],0:res[1]:delta[1],0:res[2]:delta[2]]</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>grid<sp/>=<sp/>grid.transpose(1,<sp/>2,<sp/>3,<sp/>0)<sp/>%<sp/>1</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Gradients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2*np.pi*np.random.rand(res[0]<sp/>+<sp/>1,<sp/>res[1]<sp/>+<sp/>1,<sp/>res[2]<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>phi<sp/>=<sp/>2*np.pi*np.random.rand(res[0]<sp/>+<sp/>1,<sp/>res[1]<sp/>+<sp/>1,<sp/>res[2]<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>gradients<sp/>=<sp/>np.stack(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(np.sin(phi)*np.cos(theta),<sp/>np.sin(phi)*np.sin(theta),<sp/>np.cos(phi)),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis=3</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tileable[0]:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradients[-1,:,:]<sp/>=<sp/>gradients[0,:,:]</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tileable[1]:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradients[:,-1,:]<sp/>=<sp/>gradients[:,0,:]</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tileable[2]:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradients[:,:,-1]<sp/>=<sp/>gradients[:,:,0]</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>gradients<sp/>=<sp/>gradients.repeat(d[0],<sp/>0).repeat(d[1],<sp/>1).repeat(d[2],<sp/>2)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>g000<sp/>=<sp/>gradients[<sp/><sp/><sp/><sp/>:-d[0],<sp/><sp/><sp/><sp/>:-d[1],<sp/><sp/><sp/><sp/>:-d[2]]</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>g100<sp/>=<sp/>gradients[d[0]:<sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/>:-d[1],<sp/><sp/><sp/><sp/>:-d[2]]</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>g010<sp/>=<sp/>gradients[<sp/><sp/><sp/><sp/>:-d[0],d[1]:<sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/>:-d[2]]</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>g110<sp/>=<sp/>gradients[d[0]:<sp/><sp/><sp/><sp/><sp/>,d[1]:<sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/>:-d[2]]</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>g001<sp/>=<sp/>gradients[<sp/><sp/><sp/><sp/>:-d[0],<sp/><sp/><sp/><sp/>:-d[1],d[2]:<sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>g101<sp/>=<sp/>gradients[d[0]:<sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/>:-d[1],d[2]:<sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>g011<sp/>=<sp/>gradients[<sp/><sp/><sp/><sp/>:-d[0],d[1]:<sp/><sp/><sp/><sp/><sp/>,d[2]:<sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>g111<sp/>=<sp/>gradients[d[0]:<sp/><sp/><sp/><sp/><sp/>,d[1]:<sp/><sp/><sp/><sp/><sp/>,d[2]:<sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ramps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>n000<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]<sp/><sp/>,<sp/>grid[:,:,:,1]<sp/><sp/>,<sp/>grid[:,:,:,2]<sp/><sp/>),<sp/>axis=3)<sp/>*<sp/>g000,<sp/>3)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>n100<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]-1,<sp/>grid[:,:,:,1]<sp/><sp/>,<sp/>grid[:,:,:,2]<sp/><sp/>),<sp/>axis=3)<sp/>*<sp/>g100,<sp/>3)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>n010<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]<sp/><sp/>,<sp/>grid[:,:,:,1]-1,<sp/>grid[:,:,:,2]<sp/><sp/>),<sp/>axis=3)<sp/>*<sp/>g010,<sp/>3)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>n110<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]-1,<sp/>grid[:,:,:,1]-1,<sp/>grid[:,:,:,2]<sp/><sp/>),<sp/>axis=3)<sp/>*<sp/>g110,<sp/>3)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>n001<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]<sp/><sp/>,<sp/>grid[:,:,:,1]<sp/><sp/>,<sp/>grid[:,:,:,2]-1),<sp/>axis=3)<sp/>*<sp/>g001,<sp/>3)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>n101<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]-1,<sp/>grid[:,:,:,1]<sp/><sp/>,<sp/>grid[:,:,:,2]-1),<sp/>axis=3)<sp/>*<sp/>g101,<sp/>3)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>n011<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]<sp/><sp/>,<sp/>grid[:,:,:,1]-1,<sp/>grid[:,:,:,2]-1),<sp/>axis=3)<sp/>*<sp/>g011,<sp/>3)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>n111<sp/>=<sp/>np.sum(np.stack((grid[:,:,:,0]-1,<sp/>grid[:,:,:,1]-1,<sp/>grid[:,:,:,2]-1),<sp/>axis=3)<sp/>*<sp/>g111,<sp/>3)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="dc/d59/a00364_1a3fa1574eb32a9a437f406b678d378c99" kindref="member">interpolant</ref>(grid)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>n00<sp/>=<sp/>n000*(1-t[:,:,:,0])<sp/>+<sp/>t[:,:,:,0]*n100</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>n10<sp/>=<sp/>n010*(1-t[:,:,:,0])<sp/>+<sp/>t[:,:,:,0]*n110</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>n01<sp/>=<sp/>n001*(1-t[:,:,:,0])<sp/>+<sp/>t[:,:,:,0]*n101</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>n11<sp/>=<sp/>n011*(1-t[:,:,:,0])<sp/>+<sp/>t[:,:,:,0]*n111</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>(1-t[:,:,:,1])*n00<sp/>+<sp/>t[:,:,:,1]*n10</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>(1-t[:,:,:,1])*n01<sp/>+<sp/>t[:,:,:,1]*n11</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((1-t[:,:,:,2])*n0<sp/>+<sp/>t[:,:,:,2]*n1)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="dc/d59/a00364_1a8b26fa13f4dca6276805ea852aa4b62d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="dc/d59/a00364_1a8b26fa13f4dca6276805ea852aa4b62d" kindref="member">generate_fractal_noise_3d</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,<sp/>res,<sp/>octaves=1,<sp/>persistence=0.5,<sp/>lacunarity=2,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tileable=(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),<sp/>interpolant=interpolant</highlight></codeline>
<codeline lineno="82"><highlight class="normal">):</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Generate<sp/>a<sp/>3D<sp/>numpy<sp/>array<sp/>of<sp/>fractal<sp/>noise.</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape:<sp/>The<sp/>shape<sp/>of<sp/>the<sp/>generated<sp/>array<sp/>(tuple<sp/>of<sp/>three<sp/>ints).</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>lacunarity**(octaves-1)*res.</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res:<sp/>The<sp/>number<sp/>of<sp/>periods<sp/>of<sp/>noise<sp/>to<sp/>generate<sp/>along<sp/>each</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis<sp/>(tuple<sp/>of<sp/>three<sp/>ints).<sp/>Note<sp/>shape<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lacunarity**(octaves-1)*res).</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>octaves:<sp/>The<sp/>number<sp/>of<sp/>octaves<sp/>in<sp/>the<sp/>noise.<sp/>Defaults<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>persistence:<sp/>The<sp/>scaling<sp/>factor<sp/>between<sp/>two<sp/>octaves.</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lacunarity:<sp/>The<sp/>frequency<sp/>factor<sp/>between<sp/>two<sp/>octaves.</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tileable:<sp/>If<sp/>the<sp/>noise<sp/>should<sp/>be<sp/>tileable<sp/>along<sp/>each<sp/>axis</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tuple<sp/>of<sp/>three<sp/>bools).<sp/>Defaults<sp/>to<sp/>(False,<sp/>False,<sp/>False).</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolant:<sp/>The,<sp/>interpolation<sp/>function,<sp/>defaults<sp/>to</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t*t*t*(t*(t*6<sp/>-<sp/>15)<sp/>+<sp/>10).</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>of<sp/>fractal<sp/>noise<sp/>and<sp/>of<sp/>shape<sp/>shape<sp/>generated<sp/>by</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combining<sp/>several<sp/>octaves<sp/>of<sp/>perlin<sp/>noise.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueError:<sp/>If<sp/>shape<sp/>is<sp/>not<sp/>a<sp/>multiple<sp/>of</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lacunarity**(octaves-1)*res).</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>noise<sp/>=<sp/>np.zeros(shape)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>frequency<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>amplitude<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(octaves):</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noise<sp/>+=<sp/>amplitude<sp/>*<sp/><ref refid="dc/d59/a00364_1a8f0a805cc15da261cccfb8ee1b927e2e" kindref="member">generate_perlin_noise_3d</ref>(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(frequency*res[0],<sp/>frequency*res[1],<sp/>frequency*res[2]),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tileable,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolant</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency<sp/>*=<sp/>lacunarity</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplitude<sp/>*=<sp/>persistence</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noise</highlight></codeline>
    </programlisting>
    <location file="python/perlin_image.py"/>
  </compounddef>
</doxygen>
