<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="dc/d87/a00032" kind="file" language="Python">
    <compoundname>compression.py</compoundname>
    <innernamespace refid="d3/dc9/a00355">compression</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="d3/dc9/a00355" refkind="compound"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>helperlib</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Parameters<sp/>for<sp/>Compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="d3/dc9/a00355_1abf6d0ccec2f5157184071729f129de19" refkind="member"><highlight class="normal">D<sp/>=<sp/>14<sp/></highlight><highlight class="comment">#<sp/>dynamic<sp/>range,<sp/>number<sp/>of<sp/>bits<sp/>for<sp/>sample<sp/>size<sp/>value<sp/>(between<sp/>2<sp/>to<sp/>32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="d3/dc9/a00355_1a80970133e7290ddaa15b6d949fc99420" refkind="member"><highlight class="normal">S_MIN<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="7" refid="d3/dc9/a00355_1a04632c156a04ad172a367f2760582928" refkind="member"><highlight class="normal">S_MAX<sp/>=<sp/>2**(D)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="8" refid="d3/dc9/a00355_1af02faf18c4b6fb6841abaf0b3142cc92" refkind="member"><highlight class="normal">S_MID<sp/>=<sp/>2**(D<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="d3/dc9/a00355_1aef94be98e2c9e4a4dece75f60ca9792c" refkind="member"><highlight class="normal">P<sp/>=<sp/>3<sp/></highlight><highlight class="comment">#<sp/><sp/>number<sp/>of<sp/>previous<sp/>bands<sp/>used<sp/>for<sp/>prediction<sp/>(between<sp/>2-15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="d3/dc9/a00355_1aa3e9a982c10101613c6a1dd1fb3279f6" refkind="member"><highlight class="normal">W_RES<sp/>=<sp/>19<sp/></highlight><highlight class="comment">#<sp/>Omega,<sp/>between<sp/>4<sp/>and<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="d3/dc9/a00355_1a999bcfcc11e2794539308d5015455f59" refkind="member"><highlight class="normal">W_MIN<sp/>=<sp/>-(2**(W_RES<sp/>+<sp/>2))<sp/></highlight><highlight class="comment">#<sp/>W_MIN<sp/>and<sp/>W_MAX<sp/>values<sp/>are<sp/>used<sp/>in<sp/>weight<sp/>updates<sp/>(Equation<sp/>30)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="d3/dc9/a00355_1add63171ca968cbd5ca4d60dfbf9a2746" refkind="member"><highlight class="normal">W_MAX<sp/>=<sp/>2**(W_RES<sp/>+<sp/>2)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="14" refid="d3/dc9/a00355_1a3d90133d3051fbc4816d02efd9566d8e" refkind="member"><highlight class="normal">R<sp/>=<sp/>35<sp/></highlight><highlight class="comment">#<sp/>User-defined<sp/>parameter<sp/>from<sp/>max{32,<sp/>2^(D<sp/>+<sp/>W_RES<sp/>+<sp/>1)}<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="d3/dc9/a00355_1a5e78dbd5fd0fc01ba7b98dd15e27221e" refkind="member"><highlight class="normal">M<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#<sp/>Maximum<sp/>Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d3/dc9/a00355_1a6238c0ecdac57d88d1f30259c60238cc" refkind="member"><highlight class="normal">V_MIN<sp/>=<sp/>-6<sp/></highlight><highlight class="comment">#<sp/>V_MIN<sp/>and<sp/>V_MAX<sp/>are<sp/>user-defined<sp/>parameters<sp/>that<sp/>control<sp/>the<sp/>rate<sp/>at<sp/>which<sp/>the<sp/>algorithm<sp/>adapts<sp/>to<sp/>data<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="d3/dc9/a00355_1ae2de9b8731e1c54a74579610837e59c0" refkind="member"><highlight class="normal">V_MAX<sp/>=<sp/>9<sp/></highlight><highlight class="comment">#<sp/>-6<sp/>&lt;=<sp/>v_min<sp/>&lt;<sp/>v_max<sp/>&lt;=<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="d3/dc9/a00355_1aa911c208b6f29485ce4b65c73b7f72f8" refkind="member"><highlight class="normal">T_INC<sp/>=<sp/>2**4<sp/></highlight><highlight class="comment">#parameter<sp/>from<sp/>2^4<sp/>to<sp/>2^11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Parameters<sp/>for<sp/>Decompression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d3/dc9/a00355_1a633454f54a1d7f2439a65666d71f9271" refkind="member"><highlight class="normal">U_MAX<sp/>=<sp/>8<sp/></highlight><highlight class="comment">#<sp/>Unary<sp/>length<sp/>limit<sp/>-<sp/>ranges<sp/>between<sp/>8<sp/>and<sp/>32,<sp/>each<sp/>code<sp/>word<sp/>is<sp/>not<sp/>longer<sp/>than<sp/>U_MAX<sp/>+<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="d3/dc9/a00355_1a7880c4643e340683b530ce1609a8fd47" refkind="member"><highlight class="normal">GAMMA_0<sp/>=<sp/>1<sp/></highlight><highlight class="comment">#<sp/>Initial<sp/>count<sp/>exponent<sp/>used<sp/>for<sp/>adaptive<sp/>statistics<sp/>-<sp/>ranges<sp/>from<sp/>1<sp/>to<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="d3/dc9/a00355_1a2689c4b3931025b79053532a5f1b0a85" refkind="member"><highlight class="normal">K<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#<sp/>Accumulator<sp/>initialization<sp/>constant,<sp/>user<sp/>specified<sp/>parameter<sp/>from<sp/>0<sp/>to<sp/>min(D-2,14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="d3/dc9/a00355_1a3272087e7728ef865ea990a98baf8395" refkind="member"><highlight class="normal">GAMMA_STAR<sp/>=<sp/>5<sp/></highlight><highlight class="comment">#<sp/>used<sp/>to<sp/>rescale<sp/>the<sp/>counter<sp/>-<sp/>a<sp/>value<sp/>from<sp/>4<sp/>to<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>&lt;=<sp/>30<sp/>-<sp/>D):</highlight></codeline>
<codeline lineno="29" refid="d3/dc9/a00355_1aa92b3873c7c4a40451e43cc6b2cd53f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>K_ZPRIME<sp/>=<sp/>K</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>K_ZPRIME<sp/>=<sp/>2<sp/>*<sp/>K<sp/>+<sp/>D<sp/>-<sp/>30</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Number<sp/>of<sp/>bands<sp/>for<sp/>predictions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="d3/dc9/a00355_1a7251716b703096793ed329f6b8469300" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d4/d81/a00110_1a2fee6f8dd7f3cd3ed1ae75161294c4c4" kindref="member">Ps</ref>(z):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min(P,<sp/>z)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Note<sp/>that<sp/>if<sp/>x<sp/>==<sp/>0<sp/>and<sp/>y<sp/>==<sp/>0,<sp/>local<sp/>sum<sp/>is<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>data.shape[0]</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0<sp/><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>(Nx<sp/>-<sp/>1):<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[x-1,<sp/>y,<sp/>z]<sp/>+<sp/>data[x-1,<sp/>y-1,<sp/>z]<sp/>+<sp/>data[x,<sp/>y-1,<sp/>z]<sp/>+<sp/>data[x+1,<sp/>y-1,<sp/>z]</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4<sp/>*<sp/>(data[x-1,<sp/>y,<sp/>z])</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>(data[x,<sp/>y-1,<sp/>z]<sp/>+<sp/>data[x+1,<sp/>y-1,<sp/>z])</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>(Nx<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[x-1,<sp/>y,<sp/>z]<sp/>+<sp/>data[x-1,<sp/>y-1,<sp/>z]<sp/>+<sp/>2<sp/>*<sp/>data[x,<sp/>y-1,<sp/>z]</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="d3/dc9/a00355_1a49ef318f74fbe8e8dd91da6f85f2c3e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a49ef318f74fbe8e8dd91da6f85f2c3e8" kindref="member">local_diff_vector</ref>(x,<sp/>y,<sp/>z,<sp/>data):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ld_vector<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>dN,<sp/>dW,<sp/>dNW<sp/>=<sp/>0,<sp/>0,<sp/>0<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dN<sp/>=<sp/>4<sp/>*<sp/>(data[x,<sp/>y-1,<sp/>z])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dN<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dW<sp/>=<sp/>4<sp/>*<sp/>(data[x-1,<sp/>y,<sp/>z])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNW<sp/>=<sp/>4<sp/>*<sp/>(data[x-1,<sp/>y-1,<sp/>z])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dW<sp/>=<sp/>4<sp/>*<sp/>(data[x,<sp/>y-1,<sp/>z])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNW<sp/>=<sp/>4<sp/>*<sp/>(data[x,<sp/>y-1,<sp/>z])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dW<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dNW<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ld_vector.extend([dN,<sp/>dW,<sp/>dNW])</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/><ref refid="d4/d81/a00110_1a2fee6f8dd7f3cd3ed1ae75161294c4c4" kindref="member">Ps</ref>(z)<sp/>+<sp/>1):</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>4<sp/>*<sp/>(data[x,<sp/>y,<sp/>z-i])<sp/>-<sp/><ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z-i,<sp/>data)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld_vector.append(d)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.array(ld_vector)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="d3/dc9/a00355_1a49c6c06e2ea0cfc20fce6d6edb0c72fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a49c6c06e2ea0cfc20fce6d6edb0c72fa" kindref="member">init_weight_vector</ref>(z):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>init_weight_vector<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>wN,<sp/>wW,<sp/>wNW<sp/>=<sp/>0,<sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>init_weight_vector.extend([wN,<sp/>wW,<sp/>wNW])</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/><ref refid="d4/d81/a00110_1a2fee6f8dd7f3cd3ed1ae75161294c4c4" kindref="member">Ps</ref>(z)<sp/>+<sp/>1):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1<sp/>=<sp/>(7/8)<sp/>*<sp/>(2**W_RES)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_weight_vector.append(w1)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wi<sp/>=<sp/>np.floor((1/8)<sp/>*<sp/>init_weight_vector[-1])</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_weight_vector.append(wi)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.array(init_weight_vector)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="d3/dc9/a00355_1a148cf1e7cc2fd2f23b569009afd6d3c1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a148cf1e7cc2fd2f23b569009afd6d3c1" kindref="member">prediction</ref>(ld_vector,<sp/>weight_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(36)<sp/>Calculate<sp/>inner<sp/>product<sp/>of<sp/>local<sp/>difference<sp/>and<sp/>weight<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>np.inner(weight_vector,<sp/>ld_vector)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(37)<sp/>Calculate<sp/>high<sp/>resolution<sp/>predicted<sp/>sample<sp/>values,<sp/>broken<sp/>into<sp/>temp<sp/>vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>temp1<sp/>=<sp/>d<sp/>+<sp/>(2**W_RES)<sp/>*<sp/>(<ref refid="d3/dc9/a00355_1a7f0bae725f24b8dae34a48b3cbe35d49" kindref="member">local_sum</ref>(x,<sp/>y,<sp/>z,<sp/>data)<sp/>-<sp/>4<sp/>*<sp/>S_MID)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>temp2<sp/>=<sp/>(temp1<sp/>+<sp/>(2**(R<sp/>-<sp/>1)))<sp/>%<sp/>(2**R)<sp/>-<sp/>2**(R<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>temp3<sp/>=<sp/>temp2<sp/>+<sp/>(2**(W_RES<sp/>+<sp/>2)<sp/>*<sp/>S_MID)<sp/>+<sp/>2**(W_RES<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>2**(W_RES<sp/>+<sp/>2)<sp/>*<sp/>S_MIN</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>2**(W_RES<sp/>+<sp/>2)<sp/>*<sp/>S_MAX<sp/>+<sp/>2**(W_RES<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>hr_s<sp/>=<sp/>np.clip(temp3,<sp/>min,<sp/>max)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(38)<sp/>Calculate<sp/>double-resolution<sp/>predicted<sp/>sample<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>data.shape[0]</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>s_tilde<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_tilde<sp/>=<sp/>np.floor(hr_s<sp/>/<sp/>(2**(W_RES<sp/>+<sp/>1)))</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>P<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>z<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_tilde<sp/>=<sp/>2<sp/>*<sp/>data[x,<sp/>y,<sp/>z<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(P<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>z<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_tilde<sp/>=<sp/>2<sp/>*<sp/>S_MID</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(39)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>s_hat<sp/>=<sp/>np.floor(s_tilde<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_hat,<sp/>s_tilde,d,<sp/>hr_s</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="d3/dc9/a00355_1aff3436357165d0b07392b7d032fd13bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1aff3436357165d0b07392b7d032fd13bc" kindref="member">updated_weight_vector</ref>(s_tilde,<sp/>weight_vector,<sp/>ld_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data):</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>if(x<sp/>==<sp/>71<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>3<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>z<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>data.shape[0]</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>new_weight_vector<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(49)<sp/>double-resoluction<sp/>prediction<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>dr_e<sp/>=<sp/>2<sp/>*<sp/>data[x,<sp/>y,<sp/>z]<sp/>-<sp/>s_tilde</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(50)<sp/>the<sp/>weight<sp/>update<sp/>scaling<sp/>exponent<sp/>is<sp/>calculated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Using<sp/>Eq(34)<sp/>from<sp/>older<sp/>version<sp/>of<sp/>compression<sp/>algorithm<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>w_exp<sp/>=<sp/>np.clip(V_MIN<sp/>+<sp/>np.floor((t<sp/>-<sp/>Nx)<sp/>/<sp/>T_INC),<sp/>V_MIN,<sp/>V_MAX)<sp/>+<sp/>D<sp/>-<sp/>W_RES</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>=<sp/>(<ref refid="d7/ddb/a00361_1a081f96217f1dd709e9c15859a50e68f0" kindref="member">helperlib.sign</ref>(dr_e))<sp/>*<sp/>(2**(-(w_exp)))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(weight_vector)):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_w<sp/>=<sp/>np.clip(weight_vector[i]<sp/>+<sp/>np.floor((base<sp/>*<sp/>ld_vector[i]<sp/>+<sp/>1)<sp/>/<sp/>2),<sp/>W_MIN,<sp/>W_MAX)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_weight_vector.append(new_w)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.array(new_weight_vector)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147" refid="d3/dc9/a00355_1a37ffa8d9496cef9a8e698c70ada1b0a7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a37ffa8d9496cef9a8e698c70ada1b0a7" kindref="member">mapper</ref>(delta,<sp/>s_hat,<sp/>s_tilde):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>min(s_hat<sp/>-<sp/>S_MIN,<sp/>S_MAX<sp/>-<sp/>s_hat)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(55)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(delta)<sp/>&gt;<sp/>theta:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs(delta)<sp/>+<sp/>theta</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>0<sp/>&lt;=<sp/>(-1)**s_tilde<sp/>*<sp/>delta<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(-1)**s_tilde<sp/>*<sp/>delta<sp/>&lt;=<sp/>theta:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>abs(delta)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>abs(delta)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="d3/dc9/a00355_1a11e878c5de785af8c9c14a5a86a0354d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a11e878c5de785af8c9c14a5a86a0354d" kindref="member">predictor</ref>(data):</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>data.shape[0]</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Ny<sp/>=<sp/>data.shape[1]</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>Nz<sp/>=<sp/>data.shape[2]</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>mapped<sp/>=<sp/>np.empty_like(data)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;data/logs/python-debug.LOG&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>z<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Nz):</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;Predicting.....<sp/>z<sp/>=<sp/>{z}/{Nz}&quot;</highlight><highlight class="normal">,<sp/>end=</highlight><highlight class="stringliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Ny):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>Nx):</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49c6c06e2ea0cfc20fce6d6edb0c72fa" kindref="member">init_weight_vector</ref>(z)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49ef318f74fbe8e8dd91da6f85f2c3e8" kindref="member">local_diff_vector</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_hat,<sp/>s_tilde,d,hrps<sp/>=<sp/><ref refid="d3/dc9/a00355_1a148cf1e7cc2fd2f23b569009afd6d3c1" kindref="member">prediction</ref>(ld_vector,<sp/>weight_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapped[x,<sp/>y,<sp/>z]<sp/>=<sp/><ref refid="d3/dc9/a00355_1a37ffa8d9496cef9a8e698c70ada1b0a7" kindref="member">mapper</ref>(data[x,<sp/>y,<sp/>z]<sp/>-<sp/>s_hat,<sp/>s_hat,<sp/>s_tilde)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1aff3436357165d0b07392b7d032fd13bc" kindref="member">updated_weight_vector</ref>(s_tilde,<sp/>weight_vector,<sp/>ld_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp.write(f</highlight><highlight class="stringliteral">&quot;({x},{y},{z}),<sp/>{ld_vector},{int(data[x,y,z])},<sp/>{int(s_hat)},<sp/>{int(mapped[x,y,z])},<sp/>{d},<sp/>{s_tilde},<sp/>{hrps},<sp/>{weight_vector.astype(&apos;int64&apos;)}\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>fp.close()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapped</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="d3/dc9/a00355_1ae875711385174553f6db26923ce85874" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1ae875711385174553f6db26923ce85874" kindref="member">predictor_debug</ref>(data):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>data.shape[0]</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>Ny<sp/>=<sp/>data.shape[1]</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Nz<sp/>=<sp/>data.shape[2]</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>mapped<sp/>=<sp/>np.empty_like(data)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>residuals<sp/>=<sp/>np.empty_like(data)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>z<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Nz):</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Predicting.....<sp/>z<sp/>=&quot;</highlight><highlight class="normal">,<sp/>z)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Ny):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>Nx):</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49c6c06e2ea0cfc20fce6d6edb0c72fa" kindref="member">init_weight_vector</ref>(z)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49ef318f74fbe8e8dd91da6f85f2c3e8" kindref="member">local_diff_vector</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_hat,<sp/>s_tilde<sp/>=<sp/><ref refid="d3/dc9/a00355_1a148cf1e7cc2fd2f23b569009afd6d3c1" kindref="member">prediction</ref>(ld_vector,<sp/>weight_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1aff3436357165d0b07392b7d032fd13bc" kindref="member">updated_weight_vector</ref>(s_tilde,<sp/>weight_vector,<sp/>ld_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>residuals[x,<sp/>y,<sp/>z]<sp/>=<sp/>data[x,<sp/>y,<sp/>z]<sp/>-<sp/>s_hat</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapped[x,<sp/>y,<sp/>z]<sp/>=<sp/><ref refid="d3/dc9/a00355_1a37ffa8d9496cef9a8e698c70ada1b0a7" kindref="member">mapper</ref>(data[x,<sp/>y,<sp/>z]<sp/>-<sp/>s_hat,<sp/>s_hat,<sp/>s_tilde)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapped,<sp/>residuals</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Length-Limited<sp/>Golomb-Power-of-2<sp/>Codewords,<sp/>aka<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="d3/dc9/a00355_1a6a4af5f40ce35a453cd8e214f546734f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a6a4af5f40ce35a453cd8e214f546734f" kindref="member">GPO2</ref>(k,<sp/>j):</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(np.floor(j<sp/>/<sp/>(2**k))<sp/>&lt;<sp/>U_MAX):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Write<sp/>unary<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>[0]<sp/>*<sp/>int(np.floor(j<sp/>/<sp/>(2**k)))<sp/>+<sp/>[1]</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="d7/ddb/a00361_1ac0d353b52829389169d73b9a9810f866" kindref="member">helperlib.dec_to_bin</ref>(j,<sp/>D)[-k:]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>k<sp/>!=<sp/>0<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Unary<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>[0]<sp/>*<sp/>U_MAX</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Remainder<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="d7/ddb/a00361_1ac0d353b52829389169d73b9a9810f866" kindref="member">helperlib.dec_to_bin</ref>(j,<sp/>D)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u<sp/>+<sp/>r</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="d3/dc9/a00355_1ac2c565a00560593a9177b1aad41e0d3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1ac2c565a00560593a9177b1aad41e0d3c" kindref="member">encoder</ref>(mapped_delta):</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>mapped_delta.shape[0]</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Ny<sp/>=<sp/>mapped_delta.shape[1]</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Nz<sp/>=<sp/>mapped_delta.shape[2]</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>encoded<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;data/logs/python-encoder-debug.LOG&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>z<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>Nz):</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Encoding.....<sp/>z<sp/>=&quot;</highlight><highlight class="normal">,<sp/>z,<sp/>end=</highlight><highlight class="stringliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Ny):</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Nx):</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x==46<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y==76<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>z==62:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><sp/>1</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>2**GAMMA_0<sp/></highlight><highlight class="comment">#<sp/>Counter<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>np.floor((1<sp/>/<sp/>(2**7))<sp/>*<sp/>((3<sp/>*<sp/>(2**(K_ZPRIME<sp/>+<sp/>6)))<sp/>-<sp/>49)<sp/>*<sp/>gamma)<sp/></highlight><highlight class="comment">#<sp/>Eq(58),<sp/>epsilon_z<sp/>is<sp/>accumulator<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeword<sp/>=<sp/><ref refid="d7/ddb/a00361_1ac0d353b52829389169d73b9a9810f866" kindref="member">helperlib.dec_to_bin</ref>(mapped_delta[x,<sp/>y,<sp/>z],<sp/>D)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoded<sp/>+=<sp/>codeword</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(str(codeword))</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eq(62)<sp/>Set<sp/>k_z,<sp/>code<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>gamma<sp/>&gt;<sp/>epsilon_z<sp/>+<sp/>np.floor((49<sp/>/<sp/>(2**7))<sp/>*<sp/>gamma)):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_z<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(D,<sp/>0,<sp/>-1):</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>*<sp/>(2**i)<sp/>&lt;=<sp/>epsilon_z<sp/>+<sp/>np.floor((49<sp/>/<sp/>(2**7))<sp/>*<sp/>gamma)):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_z<sp/>=<sp/>i</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>encoded<sp/>+=<sp/><ref refid="d3/dc9/a00355_1a6a4af5f40ce35a453cd8e214f546734f" kindref="member">GPO2</ref>(k_z,<sp/>mapped_delta[x,<sp/>y,<sp/>z])</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(f</highlight><highlight class="stringliteral">&quot;({x},{y},{z}):<sp/>{str(GPO2(k_z,<sp/>mapped_delta[x,<sp/>y,<sp/>z]))},<sp/>{k_z},<sp/>{gamma},<sp/>{epsilon_z}\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>counter<sp/>and<sp/>accumulator<sp/>values<sp/>after<sp/>each<sp/>pixel,<sp/>according<sp/>to<sp/>section<sp/>5.4.3.2.3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;<sp/>2**GAMMA_STAR<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>epsilon_z<sp/>+<sp/>mapped_delta[x,<sp/>y,<sp/>z]</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>gamma<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(gamma<sp/>==<sp/>2**GAMMA_STAR<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>np.floor((epsilon_z<sp/>+<sp/>mapped_delta[x,<sp/>y,<sp/>z]<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>np.floor((gamma<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Omitted<sp/>last<sp/>codeword<sp/>fill<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>print()</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;Ratio:<sp/>{int(len(encoded)<sp/>/<sp/>8)}/{int(Nx<sp/>*<sp/>Ny<sp/>*<sp/>Nz<sp/>*<sp/>D<sp/>/<sp/>8)}&quot;</highlight><highlight class="normal">,<sp/>(1<sp/>-<sp/>len(encoded)<sp/>/<sp/>(Nx<sp/>*<sp/>Ny<sp/>*<sp/>Nz<sp/>*<sp/>D))<sp/>*<sp/>100)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encoded<sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="d3/dc9/a00355_1a0b0449d8b52604ab8eed2bfa8c7c4277" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a0b0449d8b52604ab8eed2bfa8c7c4277" kindref="member">increment_xyz</ref>(x,<sp/>y,<sp/>z,<sp/>Nx,<sp/>Ny,<sp/>Nz):</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>Nx<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>1,<sp/>y,<sp/>z</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>y<sp/>&lt;<sp/>Ny<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0,<sp/>y<sp/>+<sp/>1,<sp/>z</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>z<sp/>&lt;<sp/>Nz<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0,<sp/>0,<sp/>z<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>End<sp/>of<sp/>traversal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="d3/dc9/a00355_1a78bff45f9915c892f4cf129d2fd27f55" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a78bff45f9915c892f4cf129d2fd27f55" kindref="member">inv_GPO2</ref>(k,<sp/>encoded,<sp/>i):</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>unit<sp/>test<sp/>it<sp/>only<sp/>stops<sp/>because<sp/>i<sp/>==<sp/>len(encoded)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>i<sp/>&lt;<sp/>len(encoded)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>encoded[i]<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>q<sp/>&lt;<sp/>U_MAX:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>q<sp/>==<sp/>U_MAX:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/><ref refid="d7/ddb/a00361_1a0efb929942addc663e0c6f20aecd4ccb" kindref="member">helperlib.bin_to_dec</ref>(encoded[i:i<sp/>+<sp/>D])</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>D</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>k<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="d7/ddb/a00361_1a0efb929942addc663e0c6f20aecd4ccb" kindref="member">helperlib.bin_to_dec</ref>(encoded[i:i<sp/>+<sp/>k])</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>q<sp/>*<sp/>2**k<sp/>+<sp/>r</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>k</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j,<sp/>i</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="d3/dc9/a00355_1a13bd9527fe572001978b40411c0868be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a13bd9527fe572001978b40411c0868be" kindref="member">decoder</ref>(encoded,<sp/>Nx,<sp/>Ny,<sp/>Nz):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>np.zeros((Nx,<sp/>Ny,<sp/>Nz),<sp/>dtype=np.int64)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>x,<sp/>y,<sp/>z<sp/>=<sp/>0,<sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>i<sp/>&lt;<sp/>len(encoded):</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Decoding.....<sp/>z<sp/>=&quot;</highlight><highlight class="normal">,<sp/>z)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>2**GAMMA_0<sp/></highlight><highlight class="comment">#<sp/>Counter<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>np.floor((1<sp/>/<sp/>(2**7))<sp/>*<sp/>((3<sp/>*<sp/>(2**(K_ZPRIME<sp/>+<sp/>6)))<sp/>-<sp/>49)<sp/>*<sp/>gamma)<sp/></highlight><highlight class="comment">#<sp/>Eq(58),<sp/>epsilon_z<sp/>is<sp/>accumulator<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codeword<sp/>=<sp/>encoded[i:i<sp/>+<sp/>D]</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>D</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="d7/ddb/a00361_1a0efb929942addc663e0c6f20aecd4ccb" kindref="member">helperlib.bin_to_dec</ref>(codeword)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded[x,<sp/>y,<sp/>z]<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,<sp/>y,<sp/>z<sp/>=<sp/><ref refid="d3/dc9/a00355_1a0b0449d8b52604ab8eed2bfa8c7c4277" kindref="member">increment_xyz</ref>(x,<sp/>y,<sp/>z,<sp/>Nx,<sp/>Ny,<sp/>Nz)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>*<sp/>gamma<sp/>&gt;<sp/>epsilon_z<sp/>+<sp/>np.floor((49<sp/>/<sp/>(2**7))<sp/>*<sp/>gamma)):</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_z<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>idx<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(D,<sp/>0,<sp/>-1):</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>*<sp/>(2**idx)<sp/>&lt;=<sp/>epsilon_z<sp/>+<sp/>np.floor((49<sp/>/<sp/>(2**7))<sp/>*<sp/>gamma)):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k_z<sp/>=<sp/>idx</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>read<sp/>the<sp/>code<sp/>word<sp/>and<sp/>increment<sp/>i<sp/>appropriately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,<sp/>i<sp/>=<sp/><ref refid="d3/dc9/a00355_1a78bff45f9915c892f4cf129d2fd27f55" kindref="member">inv_GPO2</ref>(k_z,<sp/>encoded,<sp/>i)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded[x,<sp/>y,<sp/>z]<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>Nx<sp/>-<sp/>1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>y<sp/>&lt;<sp/>Ny<sp/>-<sp/>1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>z<sp/>&lt;<sp/>Nz<sp/>-<sp/>1:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x,<sp/>y,<sp/>z<sp/>=<sp/><ref refid="d3/dc9/a00355_1a0b0449d8b52604ab8eed2bfa8c7c4277" kindref="member">increment_xyz</ref>(x,<sp/>y,<sp/>z,<sp/>Nx,<sp/>Ny,<sp/>Nz)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;<sp/>2**GAMMA_STAR<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>epsilon_z<sp/>+<sp/>value</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>gamma<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(gamma<sp/>==<sp/>2**GAMMA_STAR<sp/>-<sp/>1):</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epsilon_z<sp/>=<sp/>np.floor((epsilon_z<sp/>+<sp/>value<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>np.floor((gamma<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decoded</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="d3/dc9/a00355_1a1f2ff95dd2ae77e1fd9c720e7873c5c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a1f2ff95dd2ae77e1fd9c720e7873c5c6" kindref="member">unmapper</ref>(mapped_delta,<sp/>s_hat,<sp/>s_tilde):</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>min(s_hat<sp/>-<sp/>S_MIN,<sp/>S_MAX<sp/>-<sp/>s_hat)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mapped_delta<sp/>-<sp/>theta<sp/>&gt;<sp/>theta:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapped_delta<sp/>-<sp/>theta<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>theta<sp/>==<sp/>s_hat<sp/>-<sp/>S_MIN<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theta<sp/>-<sp/>mapped_delta</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>mapped_delta<sp/>%<sp/>2<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1)**s_tilde<sp/>*<sp/>mapped_delta<sp/>/<sp/>2</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1)**(s_tilde<sp/>+<sp/>1)<sp/>*<sp/>(mapped_delta<sp/>+<sp/>1)<sp/>/<sp/>2</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="d3/dc9/a00355_1a6ac9172b17fab1182e21fbc228069437" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d3/dc9/a00355_1a6ac9172b17fab1182e21fbc228069437" kindref="member">unpredictor</ref>(mapped:<sp/>np.array,<sp/>Nx:<sp/>int,<sp/>Ny:<sp/>int,<sp/>Nz:<sp/>int)<sp/>-&gt;<sp/>np.array:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>np.zeros_like(mapped)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>z<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Nz):</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Unpredicting.....<sp/>z<sp/>=&quot;</highlight><highlight class="normal">,<sp/>z)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,Ny):</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>Nx):</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>36<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>71<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>z<sp/>==<sp/>16):</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><sp/>1</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y<sp/>*<sp/>Nx<sp/>+<sp/>x</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49c6c06e2ea0cfc20fce6d6edb0c72fa" kindref="member">init_weight_vector</ref>(z)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1a49ef318f74fbe8e8dd91da6f85f2c3e8" kindref="member">local_diff_vector</ref>(x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_hat,<sp/>s_tilde,<sp/>d,<sp/>hrps<sp/>=<sp/><ref refid="d3/dc9/a00355_1a148cf1e7cc2fd2f23b569009afd6d3c1" kindref="member">prediction</ref>(ld_vector,<sp/>weight_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/><ref refid="d3/dc9/a00355_1a1f2ff95dd2ae77e1fd9c720e7873c5c6" kindref="member">unmapper</ref>(mapped[x,<sp/>y,<sp/>z],<sp/>s_hat,<sp/>s_tilde)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[x,<sp/>y,<sp/>z]<sp/>=<sp/>s_hat<sp/>+<sp/>delta</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_vector<sp/>=<sp/><ref refid="d3/dc9/a00355_1aff3436357165d0b07392b7d032fd13bc" kindref="member">updated_weight_vector</ref>(s_tilde,<sp/>weight_vector,<sp/>ld_vector,<sp/>x,<sp/>y,<sp/>z,<sp/>data)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>y<sp/>==<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>z<sp/>==<sp/>1):</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;ld_vec:<sp/>{ld_vector}\npredicted_sample:<sp/>{s_hat}\npcld:<sp/>{d}\ndelta:<sp/>{delta},<sp/>weights:<sp/>{weight_vector}\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data</highlight></codeline>
    </programlisting>
    <location file="python/compression.py"/>
  </compounddef>
</doxygen>
